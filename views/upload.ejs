<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <h1>Create Connection</h1>
        <form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data">
            <!-- Input for Person 1 -->
            <div class="form-group">
                <label for="person1">Person 1:</label>
                <input type="text" id="person1" name="person1" placeholder="Enter name of person 1" list="person1-names" required>
                <input type="hidden" id="person1-id" name="person1Id">
                <datalist id="person1-names"></datalist>
            </div>

            <!-- Input for Person 2 -->
            <div class="form-group">
                <label for="person2">Person 2:</label>
                <input type="text" id="person2" name="person2" placeholder="Enter name of person 2" list="person2-names" required>
                <input type="hidden" id="person2-id" name="person2Id">
                <datalist id="person2-names"></datalist>
            </div>

            <!-- Drag and Drop Zone -->
            <div id="dropZone" class="drop-zone">
                <input type="file" id="image" name="image" accept="image/*" required>
            </div>

            <!-- Preview -->
            <div id="preview" class="preview"></div>

            <!-- Submit Button -->
            <button type="submit" class="btn">Upload</button>
        </form>

        <!-- Back Button -->
        <a href="/" class="btn">Go Back</a>
    </div>

    <script>
        let namesData = [];

        // Fetch names from the backend
        async function fetchNames() {
            try {
                const response = await fetch('/names');
                namesData = await response.json();
            } catch (error) {
                console.error('Error fetching names:', error);
            }
        }

        // Filter names based on user input
        function filterNames(inputValue) {
            return namesData
                .filter(person => person.name.toLowerCase().includes(inputValue.toLowerCase()))
                .slice(0, 5);
        }

        // Update datalist and set ID
        function updateDatalist(inputId, datalistId, hiddenInputId) {
            const inputElement = document.getElementById(inputId);
            const dataList = document.getElementById(datalistId);
            const hiddenInput = document.getElementById(hiddenInputId);

            const filteredNames = filterNames(inputElement.value);

            dataList.innerHTML = ''; // Clear previous suggestions
            filteredNames.forEach(person => {
                const option = document.createElement('option');
                option.value = person.name;
                dataList.appendChild(option);
            });

            // Set ID if name exists
            const person = namesData.find(p => p.name === inputElement.value);
            hiddenInput.value = person ? person._id : '';
        }

        document.getElementById('person1').addEventListener('input', () => {
            updateDatalist('person1', 'person1-names', 'person1-id');
        });

        document.getElementById('person2').addEventListener('input', () => {
            updateDatalist('person2', 'person2-names', 'person2-id');
        });

        // Load names once the page loads
        document.addEventListener('DOMContentLoaded', fetchNames);

        const dropZone = document.getElementById('dropZone');
        const imageInput = document.getElementById('image');
        const preview = document.getElementById('preview');

        // Handle Drag-and-Drop Events
        dropZone.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropZone.classList.add('dragging');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('dragging');
        });

        dropZone.addEventListener('drop', (event) => {
            event.preventDefault();
            dropZone.classList.remove('dragging');
            const file = event.dataTransfer.files[0];
            handleFile(file);
        });

        // Handle Paste Events
        dropZone.addEventListener('paste', (event) => {
            const items = (event.clipboardData || event.originalEvent.clipboardData).items;
            for (let item of items) {
                if (item.type.startsWith('image/')) {
                    const file = item.getAsFile();
                    handleFile(file);
                }
            }
        });

        // Handle File Selection
        dropZone.addEventListener('click', () => imageInput.click());
        imageInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            handleFile(file);
        });

        // Handle the File
        async function handleFile(file) {
            if (file && file.type.startsWith('image/')) {
                const resizedImage = await resizeImage(file, 500, 500); // Resize the image
                showPreview(resizedImage); // Display the resized image
                appendFileToForm(resizedImage);
            } else {
                alert('Please upload a valid image file.');
            }
        }

        // Resize Image
        function resizeImage(file, maxWidth, maxHeight) {
            return new Promise((resolve) => {
                const img = new Image();
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                const reader = new FileReader();
                reader.onload = (e) => {
                    img.onload = () => {
                        // Calculate aspect ratio and resizing
                        let width = img.width;
                        let height = img.height;

                        if (width > maxWidth || height > maxHeight) {
                            const aspectRatio = width / height;
                            if (width > height) {
                                width = maxWidth;
                                height = Math.round(maxWidth / aspectRatio);
                            } else {
                                height = maxHeight;
                                width = Math.round(maxHeight * aspectRatio);
                            }
                        }

                        // Resize image on canvas
                        canvas.width = width;
                        canvas.height = height;
                        ctx.drawImage(img, 0, 0, width, height);

                        // Convert canvas to a Blob for uploading
                        canvas.toBlob((blob) => {
                            resolve(blob);
                        }, 'image/jpeg', 0.8); // Adjust quality if needed
                    };

                    img.src = e.target.result;
                };

                reader.readAsDataURL(file);
            });
        }

        // Show Image Preview
        function showPreview(blob) {
            const url = URL.createObjectURL(blob);
            preview.innerHTML = `<img src="${url}" alt="Image Preview">`;
        }

        // Append Resized Image to Form
        function appendFileToForm(blob) {
            // Keep the file name unchanged
            const resizedFile = new File([blob], imageInput.files[0]?.name || 'uploaded_image.jpg', { type: 'image/jpeg' });

            // Update the file input with the resized file
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(resizedFile);
            imageInput.files = dataTransfer.files;
        }
    </script>
</body>
</html>
